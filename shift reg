module shift_rt (R, L, E, S_in, Clock, Q); 
parameter n = 4; 
input [n-1:0] R; 
input L, E, S_in, Clock; 
output reg [n-1:0] Q=0; 

/*reg [24:0]clock_div=0;
reg use_clock;
always@(posedge Clock)
begin 
	clock_div<=clock_div+1;
	use_clock<=clock_div[24];
end*/
	
integer k;
always @(posedge Clock) 
begin 
	if (L) Q <= R; 
	else if (E) 
		begin 
			Q[n-1] <= S_in; 
			for(k = n-2; k >= 0; k = k-1) 
				Q[k] <= Q[k+1]; 
		end 
end
endmodule


/*module shift_Left (R, L, E, S_in, Clock, Q); 
parameter n = 4; 
input [n-1:0] R; 
input L, E, S_in, Clock; 
output reg [n-1:0] Q; 
integer k;
always @(posedge Clock) 
begin 
	if (L) Q <= R; 
	else if (E) 
		begin 
			Q[0] <= S_in; 
			for(k = 0; k <= n-2; k = k+1) 
				Q[k+1] <= Q[k]; 
		end 
end
endmodule*/
